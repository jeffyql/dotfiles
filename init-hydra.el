
(use-package hydra :ensure t)

(defhydra hydra-buffer (:color blue)
  "buffer commands"
  ("a" new-scratch-buffer-new-window "scratch buffer")
  ("c" recover-this-file "recover this file")
  ("d" diff-buffer-with-file "diff")
  ("e" ediff-buffers "ediff")
  ("i" ibuffer  "ibuffer")
  ("k" kill-other-buffers "kill others (unmodifed)")
  ("n" rename-buffer "rename")
  ("s" revert-buffer-with-coding-system "change end of line coding")
  ("v" revert-buffer "revert")
  )

(defhydra hydra-edit ()
  ("a" align "align" :exit t)
  ("j" move-line-down "line down")
  ("k" move-line-up "line up")
  ("r" align-regexp "align regexp")
  ("t" delete-trailing-whitespace "delete trailing WS" :exit t)
  ("y"  evil-commentary-yank "commentary yank" :exit t)
  ("SPC" just-one-space "one space" :exit t)
  )

(defhydra hydra-file (:color blue)
  ("d"  ediff-current-file "ediff")
  ("e"  make-empty-file "make empty file")
  ("f"  write-file "write file")
  ("l"  my/save-capture "capture")
  ("o"  org-capture "org capture")
  )

(defhydra hydra-help (:color blue)
  ("a" counsel-apropos "apropos")
  ("f" counsel-describe-function "function")
  ("i" info)
  ("k" describe-key "key binding")
  ("m" describe-mode "mode")
  ("v" counsel-describe-variable "variable")
  )

(defhydra hydra-misc (:color blue)
  ("a"  symbol-overlay-put "symbol-overlay-put")
  ("b"  my/buffer-to-file "capture buffer")
  ("c"  my/current-kill-to-file "capture current kill")
  ("d"  my/ffap "ffap")
  ("f"  get-buffer-file-name "file name")
  ("F"  get-buffer-file-path "file path")
  ("g"  grep "grep")
  ("l"  org-store-link "org link")
  ("k"  kill "kill ps")
  ("n"  tab-rename "tab new")
  ("m"  man "man")
  ("r"  recompile "recompile")
  ("q"  query-replace "query-replace")
  ("v"  hydra-vc/body "vc")
  ("w"  split-window-below "split window")
  )

(defhydra hydra-recentf (:color blue)
  ("c" my/counsel-recentf-c "c++")
  ("e" my/counsel-recentf-el "el")
  ("j" projectile-recentf)
  ("l" my/counsel-recentf-log "log")
  ("m" my/counsel-recentf-misc "misc")
  ("n" my/counsel-recentf-json "json")
  ("p" my/counsel-recentf-py "python")
  ("q" my/counsel-recentf-sql-cql "[sc]ql")
  ("s" my/counsel-recentf-sh "sh")
  ("t" my/counsel-recentf-txt "txt")
  ("v" my/counsel-recentf-java "java")
  ("x" my/counsel-recentf-xml "xml")
  ("r" counsel-recentf "recent")
  ("," my/counsel-recentf-set-file-extension "set designated")
  ("." my/counsel-recentf-designated "designated")
  )

(defhydra hydra-last-buffer-by-mode (:color blue)
  ("n" my/open-last-narrowed-buffer "narrowed")
  ("r" my/last-deadgrep-buffer "deadgrep")
  ("s" my/last-sql-buffer "sql")
  )

(defhydra hydra-scroll-line-down (:body-pre (evil-scroll-line-down 1))
  ("j" evil-scroll-line-up)
  ("k" evil-scroll-line-down)
  ("ESC" nil :exit t)
  )

(defhydra hydra-scroll-line-up (:body-pre (evil-scroll-line-up 1))
  ("j" evil-scroll-line-up)
  ("k" evil-scroll-line-down)
  ("ESC" nil :exit t)
  )

(defhydra hydra-shell-cmd (:color blue :hint nil)
  "
  _m_: man   _p_: ps   _t_: top
"
  ("m" display-manual)
  ("p" ps)
  ("t" top :exit nil)
  )

(defhydra hydra-tabbar-navigation ()
  ("a" my/tb-add-to-group "add" :exit t)
  ("c" my/tb-change-group-description "description")
  ("j" tabbar-backward-tab "left")
  ("k" tabbar-forward-tab "rifht")
  ("b" tabbar-move-current-tab-one-place-left "move left")
  ("f" tabbar-move-current-tab-one-place-right "move right")
  ("s" my/tb-jump-to-group "jump")
  ("t" move-current-tab-to-top "top")
  ("x" my/tb-delete-from-group "delete")
  ("SPC" evil-scroll-down)
  ("DEL" evil-scroll-up)
  ("ESC" nil :exit t)
  )

(defhydra hydra-tmux-combo ()
  ("a"   tmux-ivy-run-shell)
  ("b"   tmux-capture-pane)
  ("c"   tmux-ctrl-c)
  ("d"   tmux-d)
  ("e"   tmux-clear-pane)
  ("g"   switch-to-terminal :exit t)
  ("h"   tmux-home-dir)
  ("i"   tmux-insert-state)
  ("j"   tmux-j)
  ("k"   tmux-k)
  ("l"   tmux-capture-compilation-output)
  ("m"   hydra-tmux-copy-mode/body)
  ("n"   tmux-n)
  ("o"   tmux-swap-pane)
  ("p"   tmux-pwd)
  ("q"   tmux-q)
  ("u"   tmux-up-dir)
  ("w"   tmux-last-window)
  ("y"   tmux-y)
  ("z"   tmux-z)
  ("D"   tmux-kill-pane)
  ("N"   tmux-new-window)
  ("RET" tmux-ctrl-m)
  ("SPC" tmux-space)
  ("-"   tmux-last-dir)
  ("."   tmux-cd-default-directory)
  (","   tmux-ls)
  ("_"   tmux-split-window-vertical)
  ("0"   tmux-select-window-0)
  ("1"   tmux-select-window-1)
  ("2"   tmux-select-window-2)
  ("3"   tmux-select-window-3)
  ("4"   tmux-select-window-4)
  ("5"   tmux-select-window-5)
  ("6"   tmux-select-window-6)
  ("7"   tmux-select-window-7)
  ("8"   tmux-select-window-8)
  ("9"   tmux-select-window-9)
)
(defhydra hydra-tmux-command-history (:body-pre (tmux-begin-cmd-history) :hint nil :foreign-keys warn)
  "
  ;; _DEL_: page up _SPC_: page down _j_: down _k_: up _RET_: select
"
  ("DEL" tmux-page-up)
  ("SPC" tmux-page-down)
  ("RET" tmux-run-a-history-cmd :exit t)
  ("j" tmux-copy-mode-down)
  ("k" tmux-copy-mode-up)
  ("<escape>" tmux-quit-copy-mode :exit t)
  )

(defhydra hydra-tmux-copy-mode (:body-pre (tmux-begin-copy-mode) :hint nil :foreign-keys warn)
  "
  ;; _DEL_: page up _SPC_: page down _j_: down _k_: up _<escape>_: exit
"
  ("DEL" tmux-halfpage-up)
  ("SPC" tmux-halfpage-down)
  ("j" tmux-copy-mode-down)
  ("k" tmux-copy-mode-up)
  ("RET" tmux-capture-and-quit-copy-mode :exit t)
  ("<escape>" tmux-quit-copy-mode :exit t)
  ("q" tmux-quit-copy-mode :exit t)
  )

(defhydra hydra-tmux-repeat-command (:body-pre (tmux-command-history-prev) :hint nil)
  "
  _k_: prev _j_: next _b_: capture _c_: cancel _e_: clear _l_: pipe pane _m_: run _s_: show output _RET_: run and quit
"
  ("c" tmux-ctrl-c :exit t)
  ("b" tmux-capture :exit t)
  ("e" tmux-clear-pane)
  ("j" tmux-command-history-next)
  ("k" tmux-command-history-prev)
  ("l" tmux-pipe-pane)
  ("m" tmux-ctrl-m)
  ("s" tmux-show-pipe :exit t)
  ("RET" tmux-ctrl-m :exit t)
  ("<escape>" tmux-ctrl-c :exit t)
  )

(defhydra hydra-tmux-pipe-pane (:color blue)
  ("c" tmux-clean-pane-pipe "clean")
  ("f" tmux-fetch-pane-pipe "fetch")
  ("r" tmux-restart-pane-pipe "rstart")
  )

(defhydra hydra-tmux-window-config (:body-pre (setq tmux-selected-pane "0"))
  ("h" tmux-resize-pane-left)
  ("l" tmux-resize-pane-right)
  ("j" tmux-resize-pane-down)
  ("k" tmux-resize-pane-up)
  ("s" tmux-select-pane)
  ("-"  tmux-split-window-vertical)
  ("|" tmux-split-window-horizontal)
  ("<escape>" tmux-select-pane-0 :exit t)
  )


(defhydra hydra-toggle (:color blue)
  "toggle"
  ("a"   auto-revert-tail-mode  "auto revert")
  ("b"   tabbar-mode "tabbar")
  ("c"   compilation-mode "compilation mode")
  ("d"   toogle-display-buffer-alist "buffer-display")
  ("l"   display-line-numbers-mode "line number")
  ("g"   toggle-debug-on-error "debug on error")
  ("m"   toggle-view-tmux "view tmux")
  ("o"   origami-mode "origomi")
  ("p"   rainbow-delimiters-mode  "rainbow delimiters")
  ("r"   read-only-mode   "read only")
  ("s"   visible-mode      "visible")
  ("t"   toggle-truncate-lines "truncate lines")
  ("v"   visual-line-mode  "visual line")
  ("w"   whitespace-mode  "whitespace")
  ("C"   toggle-buffer-coding-system "coding system")
  )

(defhydra hydra-vc (:color blue)
  ("=" vc-diff "diff")
  ("e" vc-ediff "ediff")
  ("g" vc-annotate "annotate")
  ("l" vc-print-log "print log")
  ("u" vc-revert "revert")
  ("d" vc-root-diff "root diff")
  )

(defhydra hydra-move-window-splitter-left-or-up (:body-pre (my/move-splitter-left-or-up))
  ("h" my/move-splitter-left-or-up)
  ("l" my/move-splitter-right-or-down)
  )

(defhydra hydra-move-window-splitter-right-or-down (:body-pre (my/move-splitter-right-or-down))
  ("h" my/move-splitter-left-or-up)
  ("l" my/move-splitter-right-or-down)
  )

(defhydra hydra-window-up (:body-pre (move-splitter-up))
  ("j" move-splitter-down)
  ("k" move-splitter-up)
  )

(defhydra hydra-window-right (:body-pre (move-splitter-right))
  ("h" move-splitter-left)
  ("l" move-splitter-right)
  )

(provide 'init-hydra)
